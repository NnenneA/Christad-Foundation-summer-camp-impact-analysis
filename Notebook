import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import re
# Load and clean the data 
df = pd.read_excel("Summer Camp Feedback Survey(1-95).xlsx")
df = pd.read_excel("Summer Camp Feedback Survey(1-95).xlsx")

def clean_age(age):
    if isinstance(age, str):
        numbers = re.findall(r'\d+', age)
        if numbers:
            return int(numbers[0])
        else:
            return np.nan
    elif pd.isna(age):
        return np.nan
    else:
        return int(age)

df['Age'] = df['Age'].apply(clean_age)
df_clean = df.dropna(subset=['Age']).copy()
df_clean['age_group'] = pd.cut(df_clean['Age'], bins=[9, 12, 15, 18], labels=['10-12', '13-15', '16-18'])

# Clean text columns
text_columns = [
    'How do you feel about maths now, after the summer camp?',
    'What was the MOST FUN thing you learned during the camp?\n \n',
    'What was the MOST DIFFICULT thing you learned?',
    'Which practical lessons did you enjoy the most?',
    'Did any lesson surprise you or make you think, \'Wow, I didn\'t know maths was used for that!\'?',
    'Did you use something you learned here OUTSIDE class during the camp?',
    'The teachers and volunteers were',
    'If you didn\'t understand something, how comfortable were you asking for help?',
    'What type of activity helped you learn the best?',
    'What would make the camp even more fun next time?\n \n',
    'What\'s one thing you wish you could learn about that uses maths?',
    'Would you recommend this camp to your friends?',
    'For me, maths is like...\n \n',
    'Any other comments or ideas for us?\n \n'
]

for col in text_columns:
    if col in df_clean.columns:
        df_clean[col] = df_clean[col].astype(str).str.strip().str.lower()
        df_clean[col] = df_clean[col].replace('nan', np.nan)

# Standardize confidence levels
confidence_mapping = {
    'very confident': 'Very confident',
    'a bit confident': 'A bit confident',
    'not very confident': 'Not very confident', 
    'confident': 'Confident'
}

conf_col = 'How confident do you feel solving maths problems now?'
if conf_col in df_clean.columns:
    df_clean[conf_col] = df_clean[conf_col].str.lower().replace(confidence_mapping)

# Extract keywords
def extract_fun_topics(text):
    if pd.isna(text) or text == 'nan':
        return 'unknown'
    text = str(text).lower()
    topics = {
        'bearing': ['bearing', 'distance'],
        'matrix': ['matrix', 'matrices'],
        'binary': ['binary'],
        'integer': ['integer'],
        'games': ['game', 'play', 'fun'],
        'indices': ['indices', 'index'],
        'vector': ['vector'],
        'sequence': ['sequence', 'series', 'progression'],
        'modular': ['modular'],
        'algebra': ['algebra', 'expression', 'bracket'],
        'interest': ['interest', 'banking', 'saving']
    }
    for topic, keywords in topics.items():
        for keyword in keywords:
            if keyword in text:
                return topic
    return 'other'

fun_col = 'What was the MOST FUN thing you learned during the camp?\n \n'
if fun_col in df_clean.columns:
    df_clean['fun_topic'] = df_clean[fun_col].apply(extract_fun_topics)

# Create recommendation binary column
rec_col = 'Would you recommend this camp to your friends?'
if rec_col in df_clean.columns:
    df_clean['would_recommend'] = df_clean[rec_col].str.contains('definitely yes|probably yes', case=False, na=False)


print("=== COMPREHENSIVE ANALYSIS SUMMARY ===")
print(f"Total Respondents: {len(df_clean)}")
print(f"Age Range: {df_clean['Age'].min()} - {df_clean['Age'].max()} years")
print(f"Average Age: {df_clean['Age'].mean():.1f} years")

# 1. Correlation heatmap
numeric_cols = ['Age']
if 'would_recommend' in df_clean.columns:
    numeric_cols.append('would_recommend')

correlation_data = df_clean[numeric_cols].corr()
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_data, annot=True, cmap='coolwarm', center=0)
plt.title('Correlation Matrix')
plt.savefig('correlation_analysis.png', dpi=300)
plt.show()

# 2. Topic popularity analysis
if 'fun_topic' in df_clean.columns:
    topic_popularity = df_clean['fun_topic'].value_counts()
    plt.figure(figsize=(10, 6))
    topic_popularity.plot(kind='bar')
    plt.title('Most Popular Fun Topics')
    plt.ylabel('Number of Students')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig('topic_popularity.png', dpi=300)
    plt.show()

# 3. Sentiment analysis
sentiment_col = 'How do you feel about maths now, after the summer camp?'
if sentiment_col in df_clean.columns:
    sentiment_counts = df_clean[sentiment_col].value_counts()
    
    # Sentiment by topic
    if 'fun_topic' in df_clean.columns:
        sentiment_by_topic = pd.crosstab(df_clean['fun_topic'], df_clean[sentiment_col], normalize='index') * 100
        sentiment_by_topic.plot(kind='bar', stacked=True, figsize=(12, 8))
        plt.title('Sentiment Distribution by Topic')
        plt.ylabel('Percentage')
        plt.xticks(rotation=45)
        plt.legend(title='Sentiment')
        plt.tight_layout()
        plt.savefig('sentiment_by_topic.png', dpi=300)
        plt.show()

print("Analysis completed! Check the generated PNG files.")

import matplotlib.pyplot as plt
import seaborn as sns

# Set up professional styling
plt.style.use('default')
sns.set_palette("pastel")
plt.rcParams['figure.figsize'] = [10, 6]
plt.rcParams['font.size'] = 12

# 1. CORRELATION MATRIX
numeric_cols = ['Age']
if 'would_recommend' in df_clean.columns:
    numeric_cols.append('would_recommend')

correlation_data = df_clean[numeric_cols].corr()
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_data, annot=True, cmap='coolwarm', center=0)
plt.title('Correlation Matrix')
plt.tight_layout()
plt.savefig('correlation_analysis.png', dpi=300)
plt.show()

# 2. TOPIC POPULARITY ANALYSIS
if 'fun_topic' in df_clean.columns:
    topic_popularity = df_clean['fun_topic'].value_counts()
    plt.figure(figsize=(12, 6))
    colors = plt.cm.Set3(np.linspace(0, 1, len(topic_popularity)))
    bars = plt.bar(topic_popularity.index, topic_popularity.values, color=colors)
    plt.title('Most Popular Fun Topics Among Students', fontsize=14, fontweight='bold')
    plt.ylabel('Number of Students', fontweight='bold')
    plt.xlabel('Topics', fontweight='bold')
    plt.xticks(rotation=45, ha='right')
    
    # Add value labels on bars
    for bar in bars:
        height = bar.get_height()
        plt.text(bar.get_x() + bar.get_width()/2., height + 0.1,
                f'{int(height)}', ha='center', va='bottom')
    
    plt.tight_layout()
    plt.savefig('topic_popularity.png', dpi=300, bbox_inches='tight')
    plt.show()

# 3. SENTIMENT ANALYSIS
sentiment_col = 'How do you feel about maths now, after the summer camp?'
if sentiment_col in df_clean.columns:
    sentiment_counts = df_clean[sentiment_col].value_counts()
    
    plt.figure(figsize=(10, 8))
    colors = ['#ff9999', '#66b3ff', '#99ff99', '#ffcc99']
    wedges, texts, autotexts = plt.pie(sentiment_counts.values, 
                                      labels=sentiment_counts.index, 
                                      autopct='%1.1f%%',
                                      colors=colors,
                                      startangle=90)
    
    plt.title('', fontsize=16, fontweight='bold')
    plt.axis('equal')
    plt.tight_layout()
    plt.savefig('sentiment_analysis.png', dpi=300, bbox_inches='tight')
    plt.show()

# 4. CONFIDENCE LEVELS ANALYSIS
conf_col = 'How confident do you feel solving maths problems now?'
if conf_col in df_clean.columns:
    confidence_data = df_clean[conf_col].value_counts().sort_index()
    
    plt.figure(figsize=(10, 6))
    bars = plt.bar(confidence_data.index, confidence_data.values, 
                  color=['#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4'])
    
    plt.title('Confidence Levels in Math Problem Solving', fontsize=14, fontweight='bold')
    plt.ylabel('Number of Students', fontweight='bold')
    plt.xlabel('Confidence Level', fontweight='bold')
    
    # Add value labels on bars
    for bar in bars:
        height = bar.get_height()
        plt.text(bar.get_x() + bar.get_width()/2., height + 0.1,
                f'{int(height)}', ha='center', va='bottom')
    
    plt.tight_layout()
    plt.savefig('confidence_levels.png', dpi=300, bbox_inches='tight')
    plt.show()

# 5. AGE GROUP DISTRIBUTION
if 'age_group' in df_clean.columns:
    age_groups = df_clean['age_group'].value_counts().sort_index()
    
    plt.figure(figsize=(10, 6))
    bars = plt.bar(age_groups.index, age_groups.values, color=['#ff9ff3', '#feca57', '#48dbfb'])
    
    plt.title('Age Group Distribution of Participants', fontsize=14, fontweight='bold')
    plt.ylabel('Number of Students', fontweight='bold')
    plt.xlabel('Age Groups', fontweight='bold')
    
    for bar in bars:
        height = bar.get_height()
        plt.text(bar.get_x() + bar.get_width()/2., height + 0.1,
                f'{int(height)}', ha='center', va='bottom')
    
    plt.tight_layout()
    plt.savefig('age_distribution.png', dpi=300, bbox_inches='tight')
    plt.show()

# 6. RECOMMENDATION RATE BY AGE GROUP
if 'would_recommend' in df_clean.columns and 'age_group' in df_clean.columns:
    rec_by_age = df_clean.groupby('age_group')['would_recommend'].mean() * 100
    
    plt.figure(figsize=(10, 6))
    bars = plt.bar(rec_by_age.index, rec_by_age.values, color=['#00b894', '#00cec9', '#6c5ce7'])
    
    plt.title('Recommendation Rate by Age Group', fontsize=14, fontweight='bold')
    plt.ylabel('Recommendation Rate (%)', fontweight='bold')
    plt.xlabel('Age Groups', fontweight='bold')
    plt.ylim(0, 100)
    
    for bar in bars:
        height = bar.get_height()
        plt.text(bar.get_x() + bar.get_width()/2., height + 1,
                f'{height:.1f}%', ha='center', va='bottom', fontweight='bold')
    
    plt.tight_layout()
    plt.savefig('recommendation_by_age.png', dpi=300, bbox_inches='tight')
    plt.show()

print("All visualizations generated successfully!")
print("Generated files: correlation_analysis.png, topic_popularity.png, sentiment_analysis.png,")
print("confidence_levels.png, age_distribution.png, recommendation_by_age.png")

# 7. MOST DIFFICULT TOPICS ANALYSIS
difficult_col = 'What was the MOST DIFFICULT thing you learned?'
if difficult_col in df_clean.columns:
    # Extract difficult topics
    def extract_difficult_topics(text):
        if pd.isna(text) or text == 'nan' or 'nothing' in str(text).lower():
            return 'none/nothing'
        text = str(text).lower()
        difficult_topics = {
            'geometric progression': ['geometric', 'progression', 'gp'],
            'bearing': ['bearing', 'distance'],
            'matrix': ['matrix', 'matrices', 'inverse'],
            'vectors': ['vector'],
            'indices': ['indices', 'index'],
            'algebra': ['algebra', 'expression', 'factoriz', 'bracket'],
            'compound interest': ['compound', 'interest'],
            'simultaneous equations': ['simultaneous', 'equation']
        }
        for topic, keywords in difficult_topics.items():
            for keyword in keywords:
                if keyword in text:
                    return topic
        return 'other'
    
    df_clean['difficult_topic'] = df_clean[difficult_col].apply(extract_difficult_topics)
    difficult_counts = df_clean['difficult_topic'].value_counts()
    
    plt.figure(figsize=(12, 8))
    bars = plt.barh(difficult_counts.index, difficult_counts.values, color=plt.cm.Pastel1(range(len(difficult_counts))))
    plt.title('Most Difficult Topics for Students', fontsize=14, fontweight='bold')
    plt.xlabel('Number of Students', fontweight='bold')
    
    for bar in bars:
        width = bar.get_width()
        plt.text(width + 0.1, bar.get_y() + bar.get_height()/2, 
                f'{int(width)}', ha='left', va='center', fontweight='bold')
    
    plt.tight_layout()
    plt.savefig('difficult_topics.png', dpi=300, bbox_inches='tight')
    plt.show()

# 8. TEACHER SATISFACTION RATING
teacher_col = 'The teachers and volunteers were'
if teacher_col in df_clean.columns:
    teacher_ratings = df_clean[teacher_col].value_counts()
    
    plt.figure(figsize=(10, 6))
    colors = ['#4cd137', '#44bd32', '#fbc531', '#e84118']
    wedges, texts, autotexts = plt.pie(teacher_ratings.values, 
                                      labels=teacher_ratings.index, 
                                      autopct='%1.1f%%',
                                      colors=colors[:len(teacher_ratings)],
                                      startangle=90)
    
    plt.title('Satisfaction with Teachers and Volunteers', fontsize=14, fontweight='bold')
    plt.axis('equal')
    plt.tight_layout()
    plt.savefig('teacher_satisfaction.png', dpi=300, bbox_inches='tight')
    plt.show()

# 9. COMFORT LEVEL IN ASKING FOR HELP
help_col = 'If you didn\'t understand something, how comfortable were you asking for help?'
if help_col in df_clean.columns:
    comfort_levels = df_clean[help_col].value_counts().reindex(['Very comfortable', 'A little comfortable', 'Not comfortable'])
    
    plt.figure(figsize=(10, 6))
    bars = plt.bar(comfort_levels.index, comfort_levels.values, 
                  color=['#00b894', '#fdcb6e', '#e17055'])
    
    plt.title('Comfort Level in Asking for Help', fontsize=14, fontweight='bold')
    plt.ylabel('Number of Students', fontweight='bold')
    plt.xticks(rotation=45, ha='right')
    
    for bar in bars:
        height = bar.get_height()
        plt.text(bar.get_x() + bar.get_width()/2., height + 0.1,
                f'{int(height)}', ha='center', va='bottom', fontweight='bold')
    
    plt.tight_layout()
    plt.savefig('comfort_asking_help.png', dpi=300, bbox_inches='tight')
    plt.show()

# 10. PREFERRED LEARNING ACTIVITIES
activity_col = 'What type of activity helped you learn the best?'
if activity_col in df_clean.columns:
    def categorize_activities(text):
        text = str(text).lower()
        if 'group' in text or 'friend' in text:
            return 'Group work with friends'
        elif 'game' in text or 'play' in text:
            return 'Maths games'
        elif 'teacher' in text or 'example' in text or 'watch' in text:
            return 'Teacher examples/demos'
        elif 'own' in text or 'individual' in text:
            return 'Working on my own'
        elif 'project' in text or 'hand' in text:
            return 'Hands-on projects'
        else:
            return 'Other'
    
    df_clean['learning_activity'] = df_clean[activity_col].apply(categorize_activities)
    activity_counts = df_clean['learning_activity'].value_counts()
    
    plt.figure(figsize=(12, 6))
    colors = plt.cm.Set3(np.linspace(0, 1, len(activity_counts)))
    bars = plt.bar(activity_counts.index, activity_counts.values, color=colors)
    
    plt.title('Preferred Learning Activities', fontsize=14, fontweight='bold')
    plt.ylabel('Number of Students', fontweight='bold')
    plt.xticks(rotation=45, ha='right')
    
    for bar in bars:
        height = bar.get_height()
        plt.text(bar.get_x() + bar.get_width()/2., height + 0.1,
                f'{int(height)}', ha='center', va='bottom', fontweight='bold')
    
    plt.tight_layout()
    plt.savefig('learning_activities.png', dpi=300, bbox_inches='tight')
    plt.show()

# 11. SURPRISE MOMENTS ANALYSIS
surprise_col = 'Did any lesson surprise you or make you think, \'Wow, I didn\'t know maths was used for that!\'?'
if surprise_col in df_clean.columns:
    surprise_data = df_clean[surprise_col].value_counts()
    
    plt.figure(figsize=(8, 8))
    colors = ['#ff7675', '#74b9ff']
    plt.pie(surprise_data.values, labels=surprise_data.index, autopct='%1.1f%%',
            colors=colors, startangle=90, textprops={'fontsize': 12})
    plt.title('Students Who Had "Wow" Moments', fontsize=14, fontweight='bold')
    plt.axis('equal')
    plt.tight_layout()
    plt.savefig('surprise_moments.png', dpi=300, bbox_inches='tight')
    plt.show()

# 12. EXTERNAL APPLICATION OF LEARNING
external_col = 'Did you use something you learned here OUTSIDE class during the camp?'
if external_col in df_clean.columns:
    external_use = df_clean[external_col].value_counts()
    
    plt.figure(figsize=(10, 6))
    colors = ['#55efc4', '#81ecec', '#fab1a0']
    plt.bar(external_use.index, external_use.values, color=colors[:len(external_use)])
    plt.title('Application of Learning Outside Classroom', fontsize=14, fontweight='bold')
    plt.ylabel('Number of Students', fontweight='bold')
    plt.xticks(rotation=45, ha='right')
    
    for i, value in enumerate(external_use.values):
        plt.text(i, value + 0.1, f'{value}', ha='center', va='bottom', fontweight='bold')
    
    plt.tight_layout()
    plt.savefig('external_application.png', dpi=300, bbox_inches='tight')
    plt.show()


print("Available columns in the dataframe:")
for col in df_clean.columns:
    print(f"- '{col}'")

# Rename columns to simpler names first
column_rename = {
    'What would make the camp even more fun next time?\n\n ': 'suggestions',
    'What\'s one thing you wish you could learn about that uses maths?': 'future_interests',
    '. Finish this sentence: \'For me, maths is like...\'\n\n ': 'maths_analogy'
}


# Get column by position
suggestions_col = df_clean.columns[14]  # Position 15 (0-indexed)
future_col = df_clean.columns[15]       # Position 16  
analogy_col = df_clean.columns[17]      # Position 18

print(f"Using column positions:")
print(f"Suggestions: {suggestions_col}")
print(f"Future interests: {future_col}")
print(f"Analogies: {analogy_col}")


# 13. STUDENT SUGGESTIONS ANALYSIS
suggestions_col = 'What would make the camp even more fun next time?\n\n '
print(f"\n=== ANALYZING SUGGESTIONS ===")
print(f"Looking for column: '{suggestions_col}'")

print("Available columns that might match:")
for col in df_clean.columns:
    if 'make the camp even more fun' in col:
        print(f"Found matching column: '{col}'")
        suggestions_col = col
        break
else:
    print("No matching column found for suggestions")
    suggestions_col = 'What would make the camp even more fun next time?\n\n '

print(f"Using column: '{suggestions_col}'")

if suggestions_col in df_clean.columns:
    print(f"Total non-null suggestions: {df_clean[suggestions_col].notna().sum()}")

    if df_clean[suggestions_col].notna().sum() > 0:
        # Show actual data
        suggestions_data = df_clean[suggestions_col].dropna()
        print("Sample suggestions:")
        for i, suggestion in enumerate(suggestions_data.head(10)):
            print(f"{i+1}. '{suggestion}'")
        
        # Simplified categorization
        def categorize_suggestions(text):
            text = str(text).lower().strip()
            if text in ['nan', 'none', 'no', 'nothing', 'nil']:
                return 'no suggestions'
            elif 'game' in text:
                return 'more games'
            elif 'practical' in text or 'activity' in text:
                return 'more practical activities'
            elif 'time' in text or 'longer' in text or 'duration' in text or 'extend' in text:
                return 'longer duration'
            elif 'topic' in text or 'lesson' in text or 'learn' in text:
                return 'more topics'
            elif 'explain' in text or 'understand' in text or 'clear' in text:
                return 'better explanation'
            elif 'student' in text or 'people' in text or 'more student' in text:
                return 'more students'
            elif 'quiz' in text or 'competition' in text or 'prize' in text:
                return 'competitions/quiz'
            else:
                return 'other suggestions'
        
        df_clean['suggestion_category'] = df_clean[suggestions_col].apply(categorize_suggestions)
        suggestion_counts = df_clean['suggestion_category'].value_counts()
        
        print(f"\nSuggestion categories: {suggestion_counts.to_dict()}")
        
        if len(suggestion_counts) > 0:
            plt.figure(figsize=(12, 6))
            bars = plt.bar(suggestion_counts.index, suggestion_counts.values, 
                          color=plt.cm.Set3(range(len(suggestion_counts))))
            
            plt.title('Student Suggestions for Camp Improvement', fontsize=14, fontweight='bold')
            plt.ylabel('Number of Suggestions', fontweight='bold')
            plt.xticks(rotation=45, ha='right')
            
            for bar in bars:
                height = bar.get_height()
                plt.text(bar.get_x() + bar.get_width()/2., height + 0.1,
                        f'{int(height)}', ha='center', va='bottom', fontweight='bold')
            
            plt.tight_layout()
            plt.savefig('suggestions_analysis.png', dpi=300, bbox_inches='tight')
            plt.show()
            print("✓ Suggestions plot created successfully!")
        else:
            print("No suggestion categories to plot")
    else:
        print("No suggestion data available")
else:
    print(f"Column '{suggestions_col}' not found in dataframe")



# 14. FUTURE LEARNING INTERESTS 
future_col = 'What\'s one thing you wish you could learn about that uses maths?'
print(f"\n=== ANALYZING FUTURE INTERESTS ===")

if future_col in df_clean.columns:
    print(f"Total non-null interests: {df_clean[future_col].notna().sum()}")

    if df_clean[future_col].notna().sum() > 0:
        print("Current categories in future_interest:")
        print(df_clean['future_interest'].value_counts())
        
        # Filter out unwanted categories 
        interest_counts = df_clean['future_interest'].value_counts()
        
        categories_to_remove = [
            'other interests', 'other', 'not specified', 'none', 
            'no', 'nothing', 'not sure', 'no idea'
        ]
        
        # Filter the counts
        filtered_interests = interest_counts.drop(categories_to_remove, errors='ignore')
        
        print(f"\nCategories to remove: {categories_to_remove}")
        print(f"Filtered interest categories: {filtered_interests.to_dict()}")
        
        if len(filtered_interests) > 0:
            plt.figure(figsize=(14, 7))
            bars = plt.bar(filtered_interests.index, filtered_interests.values,
                          color=plt.cm.Set3(range(len(filtered_interests))))
            
            plt.title('Specific Future Learning Interests (Filtered)', fontsize=16, fontweight='bold')
            plt.ylabel('Number of Students', fontsize=12, fontweight='bold')
            plt.xlabel('Interest Categories', fontsize=12, fontweight='bold')
            plt.xticks(rotation=45, ha='right')
            
            # Add value labels on bars
            for bar in bars:
                height = bar.get_height()
                plt.text(bar.get_x() + bar.get_width()/2., height + 0.1,
                        f'{int(height)}', ha='center', va='bottom', fontweight='bold', fontsize=10)
            
            plt.tight_layout()
            plt.savefig('future_interests_filtered.png', dpi=300, bbox_inches='tight')
            plt.show()
            print("✓ Filtered future interests plot created successfully!")
            
            # Show summary
            print(f"\nSUMMARY: {len(filtered_interests)} specific interest categories found:")
            for category, count in filtered_interests.items():
                print(f"- {category}: {count} students")
                
        else:
            print("No specific interest categories found after filtering")
            
    
        removed_categories = interest_counts[interest_counts.index.isin(categories_to_remove)]
        if len(removed_categories) > 0:
            print(f"\nFiltered out {len(removed_categories)} categories:")
            for category, count in removed_categories.items():
                print(f"- {category}: {count} responses")
                
    else:
        print("No future interest data available")
else:
    print(f"Column '{future_col}' not found in dataframe")
# 15. MATHS ANALOGIES ANALYSIS 
print(f"\n=== ANALYZING MATHS ANALOGIES ===")


analogy_col_found = None
for col in df_clean.columns:
    if 'For me, maths is like' in col or 'Finish this sentence' in col:
        analogy_col_found = col
        print(f"Found analogy column: '{analogy_col_found}'")
        break

if analogy_col_found:
    print(f"Total non-null analogies: {df_clean[analogy_col_found].notna().sum()}")

    if df_clean[analogy_col_found].notna().sum() > 0:
        # Show actual data
        analogies_data = df_clean[analogy_col_found].dropna()
        print("Sample analogies:")
        for i, analogy in enumerate(analogies_data.head(10)):
            print(f"{i+1}. '{analogy}'")
        
        # Improved categorization
        def categorize_analogies(text):
            text = str(text).lower().strip()
            if text in ['nan', 'none', 'abc', '123', 'not abc', 'no']:
                return 'simple response'
            elif any(word in text for word in ['game', 'play', 'fun', 'puzzle', 'sport']):
                return 'game/fun'
            elif any(word in text for word in ['life', 'living', 'world', 'breath', 'everyday', 'air']):
                return 'life/everyday'
            elif any(word in text for word in ['food', 'sweet', 'chocolate', 'rice', 'biscuit', 'cake', 'sugar']):
                return 'food/sweet'
            elif any(word in text for word in ['easy', 'simple', 'light', 'basic', 'bit simple']):
                return 'easy/simple'
            elif any(word in text for word in ['hard', 'difficult', 'challenge', 'complex', 'tricky']):
                return 'challenge/difficult'
            elif any(word in text for word in ['language', 'communication', 'talk']):
                return 'language'
            elif any(word in text for word in ['interesting', 'cool', 'good', 'useful']):
                return 'positive description'
            else:
                return 'creative analogy'
        
        df_clean['analogy_category'] = df_clean[analogy_col_found].apply(categorize_analogies)
        analogy_counts = df_clean['analogy_category'].value_counts()
        
        print(f"\nAnalogy categories: {analogy_counts.to_dict()}")
        
        if len(analogy_counts) > 0:
            # Filter out "simple response" category
            filtered_analogies = analogy_counts.drop(['simple response'], errors='ignore')
            
            if len(filtered_analogies) > 0:
                plt.figure(figsize=(12, 6))
                bars = plt.bar(filtered_analogies.index, filtered_analogies.values,
                              color=plt.cm.Pastel1(range(len(filtered_analogies))))
                
                plt.title('How Students Describe Mathematics (Meaningful Responses)', fontsize=14, fontweight='bold')
                plt.ylabel('Number of Students', fontweight='bold')
                plt.xticks(rotation=45, ha='right')
                
                for bar in bars:
                    height = bar.get_height()
                    plt.text(bar.get_x() + bar.get_width()/2., height + 0.1,
                            f'{int(height)}', ha='center', va='bottom', fontweight='bold')
                
                plt.tight_layout()
                plt.savefig('maths_analogies_filtered.png', dpi=300, bbox_inches='tight')
                plt.show()
                print("✓ Filtered maths analogies plot created successfully!")
            else:
                print("No meaningful analogy categories to plot")
            
            # Also show all analogies including simple responses
            plt.figure(figsize=(12, 6))
            bars = plt.bar(analogy_counts.index, analogy_counts.values,
                          color=plt.cm.Pastel1(range(len(analogy_counts))))
            
            plt.title('All Maths Analogies (Including Simple Responses)', fontsize=14, fontweight='bold')
            plt.ylabel('Number of Students', fontweight='bold')
            plt.xticks(rotation=45, ha='right')
            
            for bar in bars:
                height = bar.get_height()
                plt.text(bar.get_x() + bar.get_width()/2., height + 0.1,
                        f'{int(height)}', ha='center', va='bottom', fontweight='bold')
            
            plt.tight_layout()
            plt.savefig('maths_analogies_all.png', dpi=300, bbox_inches='tight')
            plt.show()
            print("✓ All maths analogies plot created successfully!")
        else:
            print("No analogy categories to plot")
    else:
        print("No analogy data available")
else:
    print("No analogy column found in dataframe")

print("\n=== ANALYSIS COMPLETE ===")



print("\n=== INTERESTING STUDENT RESPONSES ===")

# Show interesting future interests 
if 'future_interest' in df_clean.columns:
    specific_interests = df_clean[df_clean['future_interest'].isin(['computer science', 'engineering', 'medicine', 'business/finance', 'sciences'])]
    if len(specific_interests) > 0:
        print("\nSpecific Career Interests Mentioned:")
        for interest in specific_interests['future_interest'].unique():
            count = len(specific_interests[specific_interests['future_interest'] == interest])
            print(f"- {interest}: {count} students")

# Show creative analogies 
if 'analogy_category' in df_clean.columns:
    creative_analogies = df_clean[df_clean['analogy_category'].isin(['creative analogy', 'game/fun', 'life/everyday', 'food/sweet', 'language'])]
    if len(creative_analogies) > 0:
        print("\nCreative Maths Analogies:")
        for i, row in creative_analogies.head(10).iterrows():
            if 'analogy_category' in row and analogy_col_found in row:
                print(f"- '{row[analogy_col_found]}' ({row['analogy_category']})")
